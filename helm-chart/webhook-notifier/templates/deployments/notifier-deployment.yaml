apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifier
  labels:
    app: notifier
spec:
  replicas: {{ .Values.notifier.replicaCount }}
  selector:
    matchLabels:
      app: notifier
  template:
    metadata:
      labels:
        app: notifier
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: notifier
          image: "{{ .Values.notifier.image.repository }}:{{ .Values.notifier.image.tag }}"
          imagePullPolicy: {{ .Values.notifier.image.pullPolicy }}
          ports:
            - containerPort: "{{ .Values.notifier.service.port }}"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: "{{ .Values.notifier.service.port }}"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: "{{ .Values.notifier.service.port }}"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          env:
            - name: SERVER_PORT
              value: "{{ .Values.notifier.service.port }}"

            # Kafka Config
            - name: BOOTSTRAP_SERVERS_CONFIG
              value: "{{ .Values.notifier.env.BOOTSTRAP_SERVERS_CONFIG }}"
            - name: WEBHOOK_EVENT_TOPIC
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_TOPIC }}"
            - name: WEBHOOK_EVENT_TOPIC_PARTITIONS
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_TOPIC_PARTITIONS }}"
            - name: WEBHOOK_EVENT_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_TOPIC_REPLICATION_FACTOR }}"
            - name: WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC }}"
            - name: WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC_PARTITIONS
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC_PARTITIONS }}"
            - name: WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.notifier.env.WEBHOOK_EVENT_DEAD_LETTER_QUEUE_TOPIC_REPLICATION_FACTOR }}"

            # Database Config
            - name: DB_HOST
              value: "{{ .Values.notifier.env.DB_HOST }}"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: notifier-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: notifier-secrets
                  key: DB_PASSWORD

            # Redis Config
            - name: REDIS_HOST
              value: "{{ .Values.notifier.env.REDIS_HOST }}"
            - name: REDIS_PORT
              value: "{{ .Values.notifier.env.REDIS_PORT }}"
            - name: REDIS_EVENT_LIMIT
              value: "{{ .Values.notifier.env.REDIS_EVENT_LIMIT }}"
            - name: REDIS_TIME_LIMIT
              value: "{{ .Values.notifier.env.REDIS_TIME_LIMIT }}"

            # Resilience4j Circuit Breaker Config
            - name: WEBHOOK_RETRY_MAX_ATTEMPTS
              value: "{{ .Values.notifier.env.WEBHOOK_RETRY_MAX_ATTEMPTS }}"
            - name: WEBHOOK_RETRY_WAIT_DURATION
              value: "{{ .Values.notifier.env.WEBHOOK_RETRY_WAIT_DURATION }}"
            - name: WEBHOOK_CIRCUIT_FAILURE_THRESHOLD
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_FAILURE_THRESHOLD }}"
            - name: WEBHOOK_CIRCUIT_SLOW_RATE_THRESHOLD
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_SLOW_RATE_THRESHOLD }}"
            - name: WEBHOOK_CIRCUIT_SLOW_DURATION_THRESHOLD
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_SLOW_DURATION_THRESHOLD }}"
            - name: WEBHOOK_CIRCUIT_WAIT_OPEN_STATE
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_WAIT_OPEN_STATE }}"
            - name: WEBHOOK_CIRCUIT_PERMITTED_CALLS_HALF_OPEN
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_PERMITTED_CALLS_HALF_OPEN }}"
            - name: WEBHOOK_CIRCUIT_MIN_CALLS
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_MIN_CALLS }}"
            - name: WEBHOOK_CIRCUIT_EVENT_BUFFER_SIZE
              value: "{{ .Values.notifier.env.WEBHOOK_CIRCUIT_EVENT_BUFFER_SIZE }}"

            # Thread Pool Config
            - name: KAFKA_CONSUMER_CORE_SIZE
              value: "{{ .Values.notifier.env.KAFKA_CONSUMER_CORE_SIZE }}"
            - name: KAFKA_CONSUMER_MAX_SIZE
              value: "{{ .Values.notifier.env.KAFKA_CONSUMER_MAX_SIZE }}"
            - name: KAFKA_CONSUMER_QUEUE_CAPACITY
              value: "{{ .Values.notifier.env.KAFKA_CONSUMER_QUEUE_CAPACITY }}"
